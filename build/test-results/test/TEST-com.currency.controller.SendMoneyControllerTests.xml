<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.currency.controller.SendMoneyControllerTests" tests="1" skipped="0" failures="0" errors="0" timestamp="2020-09-19T16:22:08" hostname="DESKTOP-0NJ0DAR" time="0.922">
  <properties/>
  <testcase name="index()" classname="com.currency.controller.SendMoneyControllerTests" time="0.922"/>
  <system-out><![CDATA[01:22:04.665 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating CacheAwareContextLoaderDelegate from class [org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate]
01:22:04.693 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating BootstrapContext using constructor [public org.springframework.test.context.support.DefaultBootstrapContext(java.lang.Class,org.springframework.test.context.CacheAwareContextLoaderDelegate)]
01:22:04.735 [Test worker] DEBUG org.springframework.test.context.BootstrapUtils - Instantiating TestContextBootstrapper for test class [com.currency.controller.SendMoneyControllerTests] from class [org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper]
01:22:04.759 [Test worker] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Neither @ContextConfiguration nor @ContextHierarchy found for test class [com.currency.controller.SendMoneyControllerTests], using SpringBootContextLoader
01:22:04.765 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.currency.controller.SendMoneyControllerTests]: class path resource [com/currency/controller/SendMoneyControllerTests-context.xml] does not exist
01:22:04.765 [Test worker] DEBUG org.springframework.test.context.support.AbstractContextLoader - Did not detect default resource location for test class [com.currency.controller.SendMoneyControllerTests]: class path resource [com/currency/controller/SendMoneyControllerTestsContext.groovy] does not exist
01:22:04.766 [Test worker] INFO org.springframework.test.context.support.AbstractContextLoader - Could not detect default resource locations for test class [com.currency.controller.SendMoneyControllerTests]: no resource found for suffixes {-context.xml, Context.groovy}.
01:22:04.767 [Test worker] INFO org.springframework.test.context.support.AnnotationConfigContextLoaderUtils - Could not detect default configuration classes for test class [com.currency.controller.SendMoneyControllerTests]: SendMoneyControllerTests does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
01:22:04.875 [Test worker] DEBUG org.springframework.test.context.support.ActiveProfilesUtils - Could not find an 'annotation declaring class' for annotation type [org.springframework.test.context.ActiveProfiles] and class [com.currency.controller.SendMoneyControllerTests]
01:22:04.991 [Test worker] DEBUG org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider - Identified candidate component class: file [C:\Users\pamin\workspace\currency-layer\build\classes\java\main\com\currency\CurrencyLayerApplication.class]
01:22:04.994 [Test worker] INFO org.springframework.boot.test.context.SpringBootTestContextBootstrapper - Found @SpringBootConfiguration com.currency.CurrencyLayerApplication for test class com.currency.controller.SendMoneyControllerTests
01:22:04.997 [Test worker] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - @TestExecutionListeners is not present for class [com.currency.controller.SendMoneyControllerTests]: using defaults.
01:22:04.998 [Test worker] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Loaded default TestExecutionListener class names from location [META-INF/spring.factories]: [org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener, org.springframework.test.context.web.ServletTestExecutionListener, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener, org.springframework.test.context.support.DependencyInjectionTestExecutionListener, org.springframework.test.context.support.DirtiesContextTestExecutionListener, org.springframework.test.context.transaction.TransactionalTestExecutionListener, org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener, org.springframework.test.context.event.EventPublishingTestExecutionListener]
01:22:05.018 [Test worker] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.transaction.TransactionalTestExecutionListener] due to a missing dependency. Specify custom listener classes or make the default listener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttributeSource]
01:22:05.019 [Test worker] DEBUG org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Skipping candidate TestExecutionListener [org.springframework.test.context.jdbc.SqlScriptsTestExecutionListener] due to a missing dependency. Specify custom listener classes or make the default listener classes and their required dependencies available. Offending class: [org/springframework/transaction/interceptor/TransactionAttribute]
01:22:05.019 [Test worker] INFO org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper - Using TestExecutionListeners: [org.springframework.test.context.web.ServletTestExecutionListener@78ad4f2d, org.springframework.test.context.support.DirtiesContextBeforeModesTestExecutionListener@2efd5319, org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener@6e839ecb, org.springframework.boot.test.autoconfigure.SpringBootDependencyInjectionTestExecutionListener@1ab6ddad, org.springframework.test.context.support.DirtiesContextTestExecutionListener@8703df1, org.springframework.test.context.event.EventPublishingTestExecutionListener@4c51d27d, org.springframework.boot.test.autoconfigure.restdocs.RestDocsTestExecutionListener@3ed678fa, org.springframework.boot.test.autoconfigure.web.client.MockRestServiceServerResetTestExecutionListener@12a19138, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcPrintOnlyOnFailureTestExecutionListener@1b37b928, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverTestExecutionListener@59b74209, org.springframework.boot.test.autoconfigure.webservices.client.MockWebServiceServerTestExecutionListener@542bf06d, org.springframework.boot.test.mock.mockito.ResetMocksTestExecutionListener@4a1d9381]
01:22:05.026 [Test worker] DEBUG org.springframework.test.context.support.AbstractDirtiesContextTestExecutionListener - Before test class: context [DefaultTestContext@551ae192 testClass = SendMoneyControllerTests, testInstance = [null], testMethod = [null], testException = [null], mergedContextConfiguration = [WebMergedContextConfiguration@2090bc86 testClass = SendMoneyControllerTests, locations = '{}', classes = '{class com.currency.CurrencyLayerApplication}', contextInitializerClasses = '[]', activeProfiles = '{}', propertySourceLocations = '{}', propertySourceProperties = '{org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper=true}', contextCustomizers = set[org.springframework.boot.test.autoconfigure.OverrideAutoConfigurationContextCustomizerFactory$DisableAutoConfigurationContextCustomizer@c8fc1c0, org.springframework.boot.test.autoconfigure.actuate.metrics.MetricsExportContextCustomizerFactory$DisableMetricExportContextCustomizer@4d7f7e7d, org.springframework.boot.test.autoconfigure.filter.TypeExcludeFiltersContextCustomizer@c72fbf49, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@13140d58, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizerFactory$Customizer@70a244ed, [ImportsContextCustomizer@5147d1b2 key = [org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.http.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jsonb.JsonbAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.task.TaskExecutionAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebClientAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcWebDriverAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.client.servlet.OAuth2ClientAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.resource.servlet.OAuth2ResourceServerAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration, org.springframework.boot.test.autoconfigure.web.servlet.MockMvcSecurityConfiguration]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@76c32564, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@296c7f6f, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@3d9304ba, org.springframework.boot.test.context.SpringBootTestArgs@1], resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.context.SpringBootContextLoader', parent = [null]], attributes = map[[empty]]], class annotated with @DirtiesContext [false] with mode [null].
01:22:05.078 [Test worker] DEBUG org.springframework.test.context.support.TestPropertySourceUtils - Adding inlined properties to environment: {spring.jmx.enabled=false, org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTestContextBootstrapper=true}

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/
 :: Spring Boot ::       (v2.4.0-SNAPSHOT)

2020-09-20 01:22:05.682  WARN 17112 --- [    Test worker] ory$DuplicateJsonObjectContextCustomizer : 

Found multiple occurrences of org.json.JSONObject on the class path:

	jar:file:/C:/Users/pamin/.gradle/caches/modules-2/files-2.1/org.json/json/20200518/41a767de4bde8f01d53856b905c49b2db8862f13/json-20200518.jar!/org/json/JSONObject.class
	jar:file:/C:/Users/pamin/.gradle/caches/modules-2/files-2.1/com.vaadin.external.google/android-json/0.0.20131108.vaadin1/fa26d351fe62a6a17f5cda1287c1c6110dec413f/android-json-0.0.20131108.vaadin1.jar!/org/json/JSONObject.class

You may wish to exclude one of them to ensure predictable runtime behavior

2020-09-20 01:22:05.702  INFO 17112 --- [    Test worker] c.c.controller.SendMoneyControllerTests  : Starting SendMoneyControllerTests using Java 11.0.5 on DESKTOP-0NJ0DAR with PID 17112 (started by pamin in C:\Users\pamin\workspace\currency-layer)
2020-09-20 01:22:05.705  INFO 17112 --- [    Test worker] c.c.controller.SendMoneyControllerTests  : No active profile set, falling back to default profiles: default
2020-09-20 01:22:08.211  INFO 17112 --- [    Test worker] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-20 01:22:08.445  INFO 17112 --- [    Test worker] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-20 01:22:08.912  INFO 17112 --- [    Test worker] o.s.b.t.m.w.SpringBootMockServletContext : Initializing Spring TestDispatcherServlet ''
2020-09-20 01:22:08.913  INFO 17112 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Initializing Servlet ''
2020-09-20 01:22:08.915  INFO 17112 --- [    Test worker] o.s.t.web.servlet.TestDispatcherServlet  : Completed initialization in 2 ms
2020-09-20 01:22:08.980  INFO 17112 --- [    Test worker] c.c.controller.SendMoneyControllerTests  : Started SendMoneyControllerTests in 3.888 seconds (JVM running for 6.125)
2020-09-20 01:22:09.115  INFO 17112 --- [    Test worker] c.c.controller.SendMoneyController       : countryList : [Country(countryId=1, countryQuote=USDKRW, countryCode=KRW, countryName=한국), Country(countryId=2, countryQuote=USDJPY, countryCode=JPY, countryName=일본), Country(countryId=3, countryQuote=USDPHP, countryCode=PHP, countryName=필리핀)]
2020-09-20 01:22:09.145  INFO 17112 --- [    Test worker] c.c.controller.SendMoneyController       : currencyQuoteList : []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /
       Parameters = {}
          Headers = [Content-Type:"application/json"]
             Body = <no character encoding set>
    Session Attrs = {}

Handler:
             Type = com.currency.controller.SendMoneyController
           Method = com.currency.controller.SendMoneyController#index(Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = index
             View = null
        Attribute = countries
            value = [Country(countryId=1, countryQuote=USDKRW, countryCode=KRW, countryName=한국), Country(countryId=2, countryQuote=USDJPY, countryCode=JPY, countryName=일본), Country(countryId=3, countryQuote=USDPHP, countryCode=PHP, countryName=필리핀)]
        Attribute = quotes
            value = []

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <script src="http://code.jquery.com/jquery-1.10.2.js"></script>
    <script>
        /*<![CDATA[*/

        const countryList = [{"countryId":1,"countryQuote":"USDKRW","countryCode":"KRW","countryName":"\uD55C\uAD6D"},{"countryId":2,"countryQuote":"USDJPY","countryCode":"JPY","countryName":"\uC77C\uBCF8"},{"countryId":3,"countryQuote":"USDPHP","countryCode":"PHP","countryName":"\uD544\uB9AC\uD540"}];
        const currencyQuoteList = [];

        let countryQuote;
        let currencyRate;
        let countryCode;

        // 송금하기 처리
        function getResultTransferAmount() {

            let transferAmount = Number($("#transferAmount").val()); // 송금액

            // 송금액 검증
            if(isNaN(transferAmount)) {
                $("#message").text("송금액이 바르지 않습니다.").css("color","red");
            } else {

                if(transferAmount < 0 || transferAmount > 10000) {
                    $("#message").text("송금액이 바르지 않습니다.").css("color","red");
                } else {
                    let result = transferAmount * currencyRate;
                    $("#message")
                        .text("수취금액은 " + result.toLocaleString(undefined, {maximumFractionDigits: 2} ) + " " + countryCode +  " 입니다.")
                        .css("color","black");
                }
            }
        }

        // itemId 로 currencyRate 찾기
        function getCurrencyRate(itemId) {
            countryList.forEach(element => {
                if(itemId == element.countryId) {
                    countryQuote = element.countryQuote;
                    countryCode = element.countryCode;
                }
            });

            currencyQuoteList.forEach(element => {
                if(countryQuote == element.countryQuote) {
                    currencyRate = element.currencyRate;
                }
            })

            $("#rate").text("환율: " + currencyRate.toLocaleString(undefined, {maximumFractionDigits: 2}));

        }

        // select box 변경
        $(function() {
            $('#itemId').click(function() {
                let itemId = $("#itemId").val(); // 콤보박스에서 선택한 countryId
                getCurrencyRate(itemId);
            });
        })

        // init
        $(document).ready(function(){

            let itemId = $("#itemId").val(); // 콤보박스에서 선택한 countryId
            getCurrencyRate(itemId);

        });

        /*]]]]><![CDATA[>*/
    </script>

    <body>
            <h1>환율 계산</h1><br><br>

            <div>
                <p>송금국가: 미국(USD)</p>
            </div>
            <div>
                <p>수취국가:
                    <select class="select" name="itemName" id="itemId">
                        <option value="1">한국(KRW)</option>
                        <option value="2">일본(JPY)</option>
                        <option value="3">필리핀(PHP)</option>
                    </select>
                </p>
            </div>

            <div>
                <p id="rate"> </p>
            </div>

            <div>
                <p>송금액: <input type="text" id="transferAmount"/>
                </p>
            </div>

            <div>
                <button type="button" onclick="getResultTransferAmount()" >송금하기</button>
            </div>

            <div>
                <p id="message"> </p>
            </div>
    </body>
</html>
    Forwarded URL = null
   Redirected URL = null
          Cookies = []

MockHttpServletRequest:
      HTTP Method = GET
      Request URI = /
       Parameters = {}
          Headers = [Content-Type:"application/json"]
             Body = <no character encoding set>
    Session Attrs = {}

Handler:
             Type = com.currency.controller.SendMoneyController
           Method = com.currency.controller.SendMoneyController#index(Model)

Async:
    Async started = false
     Async result = null

Resolved Exception:
             Type = null

ModelAndView:
        View name = index
             View = null
        Attribute = countries
            value = [Country(countryId=1, countryQuote=USDKRW, countryCode=KRW, countryName=한국), Country(countryId=2, countryQuote=USDJPY, countryCode=JPY, countryName=일본), Country(countryId=3, countryQuote=USDPHP, countryCode=PHP, countryName=필리핀)]
        Attribute = quotes
            value = []

FlashMap:
       Attributes = null

MockHttpServletResponse:
           Status = 200
    Error message = null
          Headers = [Content-Language:"en", Content-Type:"text/html;charset=UTF-8"]
     Content type = text/html;charset=UTF-8
             Body = <!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Title</title>
    </head>
    <script src="http://code.jquery.com/jquery-1.10.2.js"></script>
    <script>
        /*<![CDATA[*/

        const countryList = [{"countryId":1,"countryQuote":"USDKRW","countryCode":"KRW","countryName":"\uD55C\uAD6D"},{"countryId":2,"countryQuote":"USDJPY","countryCode":"JPY","countryName":"\uC77C\uBCF8"},{"countryId":3,"countryQuote":"USDPHP","countryCode":"PHP","countryName":"\uD544\uB9AC\uD540"}];
        const currencyQuoteList = [];

        let countryQuote;
        let currencyRate;
        let countryCode;

        // 송금하기 처리
        function getResultTransferAmount() {

            let transferAmount = Number($("#transferAmount").val()); // 송금액

            // 송금액 검증
            if(isNaN(transferAmount)) {
                $("#message").text("송금액이 바르지 않습니다.").css("color","red");
            } else {

                if(transferAmount < 0 || transferAmount > 10000) {
                    $("#message").text("송금액이 바르지 않습니다.").css("color","red");
                } else {
                    let result = transferAmount * currencyRate;
                    $("#message")
                        .text("수취금액은 " + result.toLocaleString(undefined, {maximumFractionDigits: 2} ) + " " + countryCode +  " 입니다.")
                        .css("color","black");
                }
            }
        }

        // itemId 로 currencyRate 찾기
        function getCurrencyRate(itemId) {
            countryList.forEach(element => {
                if(itemId == element.countryId) {
                    countryQuote = element.countryQuote;
                    countryCode = element.countryCode;
                }
            });

            currencyQuoteList.forEach(element => {
                if(countryQuote == element.countryQuote) {
                    currencyRate = element.currencyRate;
                }
            })

            $("#rate").text("환율: " + currencyRate.toLocaleString(undefined, {maximumFractionDigits: 2}));

        }

        // select box 변경
        $(function() {
            $('#itemId').click(function() {
                let itemId = $("#itemId").val(); // 콤보박스에서 선택한 countryId
                getCurrencyRate(itemId);
            });
        })

        // init
        $(document).ready(function(){

            let itemId = $("#itemId").val(); // 콤보박스에서 선택한 countryId
            getCurrencyRate(itemId);

        });

        /*]]]]><![CDATA[>*/
    </script>

    <body>
            <h1>환율 계산</h1><br><br>

            <div>
                <p>송금국가: 미국(USD)</p>
            </div>
            <div>
                <p>수취국가:
                    <select class="select" name="itemName" id="itemId">
                        <option value="1">한국(KRW)</option>
                        <option value="2">일본(JPY)</option>
                        <option value="3">필리핀(PHP)</option>
                    </select>
                </p>
            </div>

            <div>
                <p id="rate"> </p>
            </div>

            <div>
                <p>송금액: <input type="text" id="transferAmount"/>
                </p>
            </div>

            <div>
                <button type="button" onclick="getResultTransferAmount()" >송금하기</button>
            </div>

            <div>
                <p id="message"> </p>
            </div>
    </body>
</html>
    Forwarded URL = null
   Redirected URL = null
          Cookies = []
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
